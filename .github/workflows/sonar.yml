name: Sonar Cloud Analysis
on:
  workflow_call:
jobs:
  build:
    name: Run
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.17
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir ./.sonar
          mkdir ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Cache Coverlet
        id: cache-coverlet
        uses: actions/cache@v1
        with:
          path: ./.coverlet
          key: ${{ runner.os }}-coverlet
          restore-keys: ${{ runner.os }}-coverlet
      - name: Install Coverlet
        if: steps.cache-coverlet.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir ./.coverlet
          dotnet tool update coverlet.console --tool-path ./.coverlet
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          echo "SONAR_TOKEN=${SONAR_TOKEN}";

          ./.sonar/scanner/dotnet-sonarscanner begin \
              /k:"daniel-buchanan_HttpClientInjector" \
              /o:"daniel-buchanan" \
              /d:sonar.token="${SONAR_TOKEN}" \
              /d:sonar.host.url="https://sonarcloud.io" \
              /d:sonar.cs.opencover.reportsPaths=coverage.xml

          dotnet build --no-incremental HttpClientInjector.sln 

          ./.coverlet/coverlet ./test/HttpClientInjector.Tests/bin/Debug/net8.0/HttpClientInjector.Tests.dll \
              --target "dotnet" \
              --targetargs "test --no-build" \
              -f=opencover \
              -o="coverage.xml"

          ./.sonar/scanner/dotnet-sonarscanner end \
              /d:sonar.token="${SONAR_TOKEN}"